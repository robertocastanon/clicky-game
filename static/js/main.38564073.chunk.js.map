{"version":3,"sources":["components/Navbar/index.js","components/Img/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["ScoreNav","props","react_default","a","createElement","className","score","title","highScore","ImgCard","onClick","clicked","id","alt","name","src","image","FooterComp","href","shuffle","array","i","length","j","Math","floor","random","_ref","App","state","characters","beenClicked","displayLoss","displayWin","_this","setState","indexOf","push","console","log","handleScore","createShuffle","_this2","this","Navbar","style","opacity","map","character","Img","key","Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38564073.chunk.js","sourcesContent":["import React from 'react'\r\nimport './style.css'\r\n\r\nfunction ScoreNav(props) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg bg-warning text-light\">\r\n      <div className=\"col-sm\"><h5>Current Score: {props.score} </h5></div>\r\n      <div className=\"col-sm\"><h4>{props.title}</h4></div>\r\n      <div><h5>High Score: {props.highScore}</h5></div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default ScoreNav","import React from 'react'\r\nimport './style.css'\r\n\r\nconst ImgCard = props => (\r\n  <div className=\"card\" onClick={() => props.clicked(props.id)}>\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default ImgCard\r\n","import React from 'react'\r\nimport './style.css'\r\n\r\nconst FooterComp = props => (\r\n  <nav className=\"navbar navbar-expand-lg bg-warning text-light\">\r\n    <a href=\"https://github.com/robertocastanon/clicky-game\" className=\"col-sm text-center\"><h7>Github Repo</h7></a>\r\n  </nav>\r\n)\r\n\r\nexport default FooterComp\r\n","import React, { Component } from \"react\";\nimport './App.css'\nimport ScoreNav from './components/Navbar'\n// import Header from './components/Header'\nimport ImgCard from './components/Img'\nimport characters from './characters.json'\nimport Footer from './components/Footer'\n\n// this function shuffles when a card is clicked\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  // set initial variables to use later on to 0 or empty\n  state = {\n    characters,\n    // set scores to zero\n    score: 0,\n    highScore: 0,\n    beenClicked: [],\n    // at 0 these alerts will not display\n    displayLoss: 0,\n    displayWin: 0\n\n  }\n  // clicked function\n  clicked = id => {\n    // will asign the state of the empty beenClicked array to be updated\n    let beenClicked = this.state.beenClicked\n    let score = this.state.score\n    let highScore = this.state.highScore\n    this.setState({\n      displayLoss: 0\n    })\n  // if the the clicked card has an ID of the already indexed characters\n  if (beenClicked.indexOf(id) === -1) {\n    // push into the beenClicked array to be stored\n    beenClicked.push(id)\n    console.log(beenClicked)\n    // run function  to handle the socre\n    this.handleScore()\n    // run function to shuffle after every click\n    this.createShuffle()\n  } else if (this.state.score === 12) {\n    // then display the win alert, if the score equals to 12\n    this.setState({\n      displayWin: 1,\n      score: 0,\n      beenClicked: []\n    })\n  } else {\n    this.setState({\n      // else then display loss alert\n      score: 0,\n      beenClicked: []\n    })\n    console.log('dupes')\n    this.setState({\n      displayLoss: 1\n    })\n  }\n  // if the score is larger than the highScore than set highScore to score\n  if (score > highScore) {\n    this.setState({\n      highScore: score\n    })\n  }\n}\n// function to handle the increase of score after every click that isnt a dupelicate\nhandleScore = () => {\n  this.setState({ score: this.state.score + 1 })\n}\n\n// functino to shuffle up all the cards\ncreateShuffle = () => {\n  this.setState({ characters: shuffle(characters) })\n}\n\n  render () {\n    return (\n      <div>\n        <ScoreNav \n          score={this.state.score}\n          title=\"Battle Cats!\"\n          highScore={this.state.highScore}\n        />\n        <row>\n        <div className=\"alert alert-danger text-center\" style={{ opacity: this.state.displayLoss }}>\n          You clicked on a duplicate, click any card to try again!\n        </div>\n        <div className=\"alert alert-success text-center\" style={{ opacity: this.state.displayWin }}>\n          You got the highest score! Good Job!\n        </div>\n        </row>\n        {/* <Header /> */}\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.characters.map((character) => (\n              <ImgCard\n                key={character.id}\n                id={character.id}\n                name={character.name}\n                image={character.image}\n                clicked={this.clicked}\n              />\n            ))}\n            </div>\n        </div>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}